{"version":3,"sources":["components/Dialog.js","redux/actions/index.js","components/Table.js","pages/Home.js","App.js","redux/reducers/index.js","index.js"],"names":["DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","props","children","classes","onClose","disableTypography","className","Typography","IconButton","aria-label","onClick","connect","setJobs","payload","dispatch","a","type","open","handleDialogClose","selectedJob","jobs","useState","days","setDays","state","setState","Dialog","id","moment","format","DialogContent","TextField","fullWidth","placeholder","value","onChange","event","target","Button","preventDefault","WEEKEND","day","weekday","HOLIDAY","map","job","index","startOn","isSameOrAfter","counter","momentDate","Date","includes","add","newArr","variant","StyledTableCell","head","backgroundColor","common","black","white","body","fontSize","TableCell","StyledTableRow","action","hover","TableRow","useStyles","makeStyles","table","width","CustomizedTables","setSelectedJob","setOpen","TableContainer","component","Paper","Table","TableHead","TableBody","key","disabled","handleDialogOpen","label","scope","tasks","task","Divider","App","initialState","Reducer","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ccfcbe5d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport moment from 'moment';\r\nimport PropTypes from \"prop-types\";\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { setJobs } from '../redux/actions/index';\r\n\r\n//muaterial-ui\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    IconButton,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(5),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root}>\r\n            <Typography >{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst CustomDialog = (props) => {\r\n    const {\r\n        open,\r\n        handleDialogClose,\r\n        selectedJob,\r\n        jobs,\r\n        setJobs\r\n    } = props\r\n    const [days, setDays] = useState();\r\n    const [state, setState] = useState(jobs);\r\n\r\n    const handleDaysChange = (event) => {\r\n        (event.target.value > 0) && setDays(event.target.value);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault(); //to prevent auto reload\r\n\r\n        const WEEKEND = [moment().day(\"Saturday\").weekday(), moment().day(\"Sunday\").weekday()];\r\n        const HOLIDAY = ['2020-09-08'];\r\n\r\n        jobs.map((job, index) => {\r\n            if (moment(job.startOn).isSameOrAfter(selectedJob)) { //postpone only those jobs which are after the selected job to be postponed not the ones before the selected job.\r\n\r\n                var counter = 0, momentDate = moment(new Date(job.startOn));\r\n\r\n                //postpones the job by n days only if its not a on a holiday nor a weekend\r\n                if (!HOLIDAY.includes(momentDate.format('YYYY-MM-DD')) && !WEEKEND.includes(momentDate.weekday())) {\r\n                    while (counter < days) {\r\n                        momentDate = momentDate.add(1, 'days');\r\n\r\n                        //skips postponing a job to a holiday or a weekend\r\n                        if (!HOLIDAY.includes(momentDate.format('YYYY-MM-DD')) && !WEEKEND.includes(momentDate.weekday())) {\r\n                            counter++\r\n                        }\r\n                    }\r\n\r\n                    //update the jobs state and set updated start date\r\n                    let newArr = [...jobs]\r\n                    newArr[index].startOn = momentDate.format('YYYY-MM-DD')\r\n                    setState(newArr)\r\n                }\r\n            }\r\n        })\r\n        setJobs(state);//update the jobs state in redux store\r\n\r\n        handleDialogClose(); //close dialog\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                onClose={handleDialogClose}\r\n                open={open}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleDialogClose}>\r\n                    Postpone job scheduled for {moment(selectedJob).format('dddd')}  {selectedJob}  by :\r\n                </DialogTitle>\r\n\r\n                <DialogContent >\r\n                    <form >\r\n                        <TextField\r\n                            type=\"number\"\r\n                            fullWidth\r\n                            placeholder=\"days\"\r\n                            value={days}\r\n                            onChange={handleDaysChange}\r\n                        />\r\n                        <br /><br />\r\n                        <Button\r\n                            onClick={handleSubmit}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            Postpone\r\n                        </Button>\r\n                    </form>\r\n                </DialogContent>\r\n\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nCustomDialog.propTypes = {\r\n    setJobs: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { setJobs })(CustomDialog);","export const setJobs = (payload) => async (dispatch) => {\r\n    dispatch({\r\n        type: 'SET_JOBS',\r\n        payload: payload\r\n    });\r\n};\r\n","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\n//Material ui\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Divider,\r\n} from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n//custom\r\nimport Dialog from \"./Dialog\";\r\n\r\n//icons\r\nimport LowPriorityIcon from '@material-ui/icons/LowPriority';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        width: 'fit-content',\r\n        padding: 100\r\n    },\r\n});\r\n\r\nconst CustomizedTables = (props) => {\r\n    const classes = useStyles();\r\n    const { jobs } = props;\r\n    const [selectedJob, setSelectedJob] = useState();\r\n    const WEEKEND = [moment().day(\"Saturday\").weekday(), moment().day(\"Sunday\").weekday()];\r\n    const HOLIDAY = ['2020-09-08'];\r\n\r\n    //Dialog state and handlers\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleDialogClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleDialogOpen = (job) => {\r\n        setSelectedJob(job);\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell >Actions</StyledTableCell>\r\n                        <StyledTableCell >Start On</StyledTableCell>\r\n                        <StyledTableCell >Tasks</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {jobs.map((job) => (\r\n                        <StyledTableRow key={job.startOn}>\r\n\r\n                            <StyledTableCell>\r\n                                <IconButton disabled={WEEKEND.includes(moment(job.startOn).weekday()) || HOLIDAY.includes(moment(job.startOn).format('YYYY-MM-DD'))}\r\n                                    onClick={() => handleDialogOpen(job.startOn)}\r\n                                    color=\"primary\"\r\n                                    label=\"postpone\">\r\n                                    <LowPriorityIcon />\r\n                                </IconButton>\r\n\r\n                                <Dialog jobs={jobs} selectedJob={selectedJob} open={open} handleDialogClose={handleDialogClose} />\r\n                            </StyledTableCell>\r\n\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {moment(job.startOn).format('dddd')} {job.startOn}\r\n                            </StyledTableCell>\r\n\r\n                            <StyledTableCell >{job.tasks.map((task) => (\r\n                                <div>\r\n                                    {task}\r\n                                    <Divider />\r\n                                </div>\r\n\r\n                            ))}</StyledTableCell>\r\n\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer >\r\n    );\r\n}\r\nexport default CustomizedTables;","import React from 'react';\r\nimport Table from \"../components/Table\";\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\n\r\nconst Home = (props) => {\r\n    const { jobs } = props;\r\n    return (\r\n        <div >\r\n            <Table jobs={jobs}></Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        jobs: state.jobs,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);","import React from 'react';\nimport './App.css';\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\r\n    jobs: [{\r\n        startOn: \"2020-09-04\",\r\n        tasks: [\"Eat\", \"Sleep\", \"Code\", \"Repeat\"]\r\n    },\r\n    {\r\n        startOn: \"2020-09-05\",\r\n        tasks: [\"Eat\", \"Dance\"]\r\n    },\r\n    {\r\n        startOn: \"2020-09-06\",\r\n        tasks: [\"Do homework\"]\r\n    },\r\n    {\r\n        startOn: \"2020-09-07\",\r\n        tasks: [\"Finish project work\", \"Fix errors\"]\r\n    },\r\n    {\r\n        startOn: \"2020-09-08\",\r\n        tasks: [\"Go to play\", \"Learn React\"]\r\n    },\r\n    {\r\n        startOn: \"2020-09-09\",\r\n        tasks: [\"Chill\", \"Visit the doctor\"]\r\n    }\r\n    ]\r\n};\r\n\r\nconst Reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_JOBS':\r\n            return {\r\n                ...state,\r\n                jobs: action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default Reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducers from './redux/reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\nexport default store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}